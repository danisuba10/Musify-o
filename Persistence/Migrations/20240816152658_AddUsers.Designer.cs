// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240816152658_AddUsers")]
    partial class AddUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("'UUID()'");

                    b.Property<string>("ImageLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Album_Name");

                    b.ToTable("Albums", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1e2c025-7d4d-4d90-bd65-05c064c50a5c"),
                            ImageLocation = "path/to/image1",
                            Name = "First Album"
                        },
                        new
                        {
                            Id = new Guid("3646c63b-410a-447c-9019-154d07600fee"),
                            ImageLocation = "path/to/image2",
                            Name = "Second Album"
                        });
                });

            modelBuilder.Entity("Domain.AlbumArtistRelation", b =>
                {
                    b.Property<Guid>("AlbumId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("char(36)");

                    b.HasKey("AlbumId", "ArtistId");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("IX_AlbumArtistRelation_AlbumId");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("IX_AlbumArtistRelation_ArtistId");

                    b.ToTable("AlbumArtistRelations");

                    b.HasData(
                        new
                        {
                            AlbumId = new Guid("e1e2c025-7d4d-4d90-bd65-05c064c50a5c"),
                            ArtistId = new Guid("7eb98e32-d73d-4690-8d00-b79e6dedf00e")
                        },
                        new
                        {
                            AlbumId = new Guid("e1e2c025-7d4d-4d90-bd65-05c064c50a5c"),
                            ArtistId = new Guid("47a6853b-a9c7-48a1-8292-5566e754459a")
                        },
                        new
                        {
                            AlbumId = new Guid("3646c63b-410a-447c-9019-154d07600fee"),
                            ArtistId = new Guid("47a6853b-a9c7-48a1-8292-5566e754459a")
                        });
                });

            modelBuilder.Entity("Domain.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("'UUID()'");

                    b.Property<string>("ImageLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Artist_Name");

                    b.ToTable("Artists", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7eb98e32-d73d-4690-8d00-b79e6dedf00e"),
                            ImageLocation = "path/to/image1",
                            Name = "First Artist"
                        },
                        new
                        {
                            Id = new Guid("47a6853b-a9c7-48a1-8292-5566e754459a"),
                            ImageLocation = "path/to/image2",
                            Name = "Second Artist"
                        });
                });

            modelBuilder.Entity("Domain.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("'UUID()'");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("char(36)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<int>("PositionInAlbum")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("IX_Song_AlbumId");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Song_Title");

                    b.HasIndex("Title", "AlbumId")
                        .HasDatabaseName("IX_Song_Title_AlbumId");

                    b.ToTable("Songs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ddd68b5-4a6d-4a26-852e-da44c6323f25"),
                            AlbumId = new Guid("e1e2c025-7d4d-4d90-bd65-05c064c50a5c"),
                            Duration = new TimeSpan(0, 0, 3, 45, 0),
                            PositionInAlbum = -1,
                            Title = "First Song"
                        },
                        new
                        {
                            Id = new Guid("fbe275d8-fa6e-4a0a-9fa5-f3af63a3b9cf"),
                            AlbumId = new Guid("e1e2c025-7d4d-4d90-bd65-05c064c50a5c"),
                            Duration = new TimeSpan(0, 0, 4, 20, 0),
                            PositionInAlbum = -1,
                            Title = "Second Song"
                        },
                        new
                        {
                            Id = new Guid("c08e8d07-6ce1-485b-b2eb-fa1896ec55d9"),
                            AlbumId = new Guid("3646c63b-410a-447c-9019-154d07600fee"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            PositionInAlbum = -1,
                            Title = "Third Song"
                        });
                });

            modelBuilder.Entity("Domain.SongArtistRelation", b =>
                {
                    b.Property<Guid>("SongId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("char(36)");

                    b.HasKey("SongId", "ArtistId");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("IX_SongArtistRelation_ArtistId");

                    b.HasIndex("SongId")
                        .HasDatabaseName("IX_SongArtistRelation_SongId");

                    b.ToTable("SongArtistRelations");

                    b.HasData(
                        new
                        {
                            SongId = new Guid("9ddd68b5-4a6d-4a26-852e-da44c6323f25"),
                            ArtistId = new Guid("7eb98e32-d73d-4690-8d00-b79e6dedf00e")
                        },
                        new
                        {
                            SongId = new Guid("fbe275d8-fa6e-4a0a-9fa5-f3af63a3b9cf"),
                            ArtistId = new Guid("7eb98e32-d73d-4690-8d00-b79e6dedf00e")
                        },
                        new
                        {
                            SongId = new Guid("c08e8d07-6ce1-485b-b2eb-fa1896ec55d9"),
                            ArtistId = new Guid("47a6853b-a9c7-48a1-8292-5566e754459a")
                        });
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("'UUID()'");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.AlbumArtistRelation", b =>
                {
                    b.HasOne("Domain.Album", "Album")
                        .WithMany("AlbumArtistRelations")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Artist", "Artist")
                        .WithMany("AlbumArtistRelations")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Domain.Song", b =>
                {
                    b.HasOne("Domain.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Domain.SongArtistRelation", b =>
                {
                    b.HasOne("Domain.Artist", "Artist")
                        .WithMany("SongArtistRelations")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Song", "Song")
                        .WithMany("SongArtistRelations")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Domain.Album", b =>
                {
                    b.Navigation("AlbumArtistRelations");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Domain.Artist", b =>
                {
                    b.Navigation("AlbumArtistRelations");

                    b.Navigation("SongArtistRelations");
                });

            modelBuilder.Entity("Domain.Song", b =>
                {
                    b.Navigation("SongArtistRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
