// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240821161320_CleanDB")]
    partial class CleanDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("'UUID()'");

                    b.Property<string>("ImageLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Album_Name");

                    b.ToTable("Albums", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b05acd7-cca7-48e5-93ea-95c54b7254c4"),
                            ImageLocation = "path/to/image1",
                            Name = "First Album"
                        },
                        new
                        {
                            Id = new Guid("24b82b49-4347-4bde-a8ff-fa9da3af8a31"),
                            ImageLocation = "path/to/image2",
                            Name = "Second Album"
                        });
                });

            modelBuilder.Entity("Domain.AlbumArtistRelation", b =>
                {
                    b.Property<Guid>("AlbumId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("char(36)");

                    b.HasKey("AlbumId", "ArtistId");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("IX_AlbumArtistRelation_AlbumId");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("IX_AlbumArtistRelation_ArtistId");

                    b.ToTable("AlbumArtistRelations");

                    b.HasData(
                        new
                        {
                            AlbumId = new Guid("9b05acd7-cca7-48e5-93ea-95c54b7254c4"),
                            ArtistId = new Guid("4360f82d-c3d0-4ca9-a2f7-5c5c3c1c8061")
                        },
                        new
                        {
                            AlbumId = new Guid("9b05acd7-cca7-48e5-93ea-95c54b7254c4"),
                            ArtistId = new Guid("1915e314-35b8-4492-959e-c8330d32e28d")
                        },
                        new
                        {
                            AlbumId = new Guid("24b82b49-4347-4bde-a8ff-fa9da3af8a31"),
                            ArtistId = new Guid("1915e314-35b8-4492-959e-c8330d32e28d")
                        });
                });

            modelBuilder.Entity("Domain.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("'UUID()'");

                    b.Property<string>("ImageLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Artist_Name");

                    b.ToTable("Artists", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4360f82d-c3d0-4ca9-a2f7-5c5c3c1c8061"),
                            ImageLocation = "path/to/image1",
                            Name = "First Artist"
                        },
                        new
                        {
                            Id = new Guid("1915e314-35b8-4492-959e-c8330d32e28d"),
                            ImageLocation = "path/to/image2",
                            Name = "Second Artist"
                        });
                });

            modelBuilder.Entity("Domain.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("'UUID()'");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("char(36)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<int>("PositionInAlbum")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("IX_Song_AlbumId");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Song_Title");

                    b.HasIndex("Title", "AlbumId")
                        .HasDatabaseName("IX_Song_Title_AlbumId");

                    b.ToTable("Songs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8769057b-11d7-4188-b15b-545e373c9b36"),
                            AlbumId = new Guid("9b05acd7-cca7-48e5-93ea-95c54b7254c4"),
                            Duration = new TimeSpan(0, 0, 3, 45, 0),
                            PositionInAlbum = -1,
                            Title = "First Song"
                        },
                        new
                        {
                            Id = new Guid("cc92ed37-447b-4563-8f56-4c52e2c3867b"),
                            AlbumId = new Guid("9b05acd7-cca7-48e5-93ea-95c54b7254c4"),
                            Duration = new TimeSpan(0, 0, 4, 20, 0),
                            PositionInAlbum = -1,
                            Title = "Second Song"
                        },
                        new
                        {
                            Id = new Guid("ab1835db-c7b4-4b92-bcc1-ea88c6867868"),
                            AlbumId = new Guid("24b82b49-4347-4bde-a8ff-fa9da3af8a31"),
                            Duration = new TimeSpan(0, 0, 5, 0, 0),
                            PositionInAlbum = -1,
                            Title = "Third Song"
                        });
                });

            modelBuilder.Entity("Domain.SongArtistRelation", b =>
                {
                    b.Property<Guid>("SongId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("char(36)");

                    b.HasKey("SongId", "ArtistId");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("IX_SongArtistRelation_ArtistId");

                    b.HasIndex("SongId")
                        .HasDatabaseName("IX_SongArtistRelation_SongId");

                    b.ToTable("SongArtistRelations");

                    b.HasData(
                        new
                        {
                            SongId = new Guid("8769057b-11d7-4188-b15b-545e373c9b36"),
                            ArtistId = new Guid("4360f82d-c3d0-4ca9-a2f7-5c5c3c1c8061")
                        },
                        new
                        {
                            SongId = new Guid("cc92ed37-447b-4563-8f56-4c52e2c3867b"),
                            ArtistId = new Guid("4360f82d-c3d0-4ca9-a2f7-5c5c3c1c8061")
                        },
                        new
                        {
                            SongId = new Guid("ab1835db-c7b4-4b92-bcc1-ea88c6867868"),
                            ArtistId = new Guid("1915e314-35b8-4492-959e-c8330d32e28d")
                        });
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("'UUID()'");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.AlbumArtistRelation", b =>
                {
                    b.HasOne("Domain.Album", "Album")
                        .WithMany("AlbumArtistRelations")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Artist", "Artist")
                        .WithMany("AlbumArtistRelations")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Domain.Song", b =>
                {
                    b.HasOne("Domain.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Domain.SongArtistRelation", b =>
                {
                    b.HasOne("Domain.Artist", "Artist")
                        .WithMany("SongArtistRelations")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Song", "Song")
                        .WithMany("SongArtistRelations")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Domain.Album", b =>
                {
                    b.Navigation("AlbumArtistRelations");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Domain.Artist", b =>
                {
                    b.Navigation("AlbumArtistRelations");

                    b.Navigation("SongArtistRelations");
                });

            modelBuilder.Entity("Domain.Song", b =>
                {
                    b.Navigation("SongArtistRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
